//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    using System.Collections.Generic;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;


    /// The schedule has time points where the time between them is constant.
    public class RegularIntervalSchedule : BasicIntervalSchedule {
        
        /// The time for the last time point.
        private DateTime endTime;
        
       
        private List<long> timePoints = new List<long>();
        
        private long timeStep=0;
        
        
        public RegularIntervalSchedule(long globalId) : base(globalId)
        {
        }

        public DateTime EndTime { get => endTime; set => endTime = value; }
        public List<long> TimePoints { get => timePoints; set => timePoints = value; }
        public long Cim_timeStep { get => timeStep; set => timeStep = value; }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                RegularIntervalSchedule x = (RegularIntervalSchedule)obj;
                return ((x.endTime == this.endTime) && (x.timeStep == this.timeStep) &&
                        (CompareHelper.CompareLists(x.timePoints, this.timePoints)));
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.REGULARISCHEDULE_ENDTIME:
                case ModelCode.REGULARISCHEDULE_RTPOINTS:
                case ModelCode.REGULARISCHEDULE_TIMESTEP:
                    return true;

                default:
                    return base.HasProperty(t);
            }
        }

        public override void GetProperty(Property prop)
        {
            switch (prop.Id)
            {
                case ModelCode.REGULARISCHEDULE_ENDTIME:
                    prop.SetValue(endTime);
                    break;
                case ModelCode.REGULARISCHEDULE_RTPOINTS:
                    prop.SetValue(timePoints);
                    break;
                case ModelCode.REGULARISCHEDULE_TIMESTEP:
                    prop.SetValue(timeStep);
                    break;
                default:
                    base.GetProperty(prop);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.REGULARISCHEDULE_ENDTIME:
                    endTime = property.AsDateTime();
                    break;
                case ModelCode.REGULARISCHEDULE_TIMESTEP:
                    timeStep = property.AsLong();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        public override bool IsReferenced
        {
            get
            {
                return timePoints.Count > 0 || base.IsReferenced;
            }
        }

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (timeStep != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
            {
                references[ModelCode.REGULARTPOINT] = new List<long>();
                references[ModelCode.REGULARTPOINT].Add(timeStep);
            }

            if (timePoints != null && timePoints.Count > 0 && (refType == TypeOfReference.Target || refType == TypeOfReference.Both))
            {
                references[ModelCode.REGULARISCHEDULE_RTPOINTS] = timePoints.GetRange(0, timePoints.Count);
            }

            base.GetReferences(references, refType);
        }

        public override void AddReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.REGULARTPOINT_REGULARISCHEDULE:
                    timePoints.Add(globalId);
                    break;

                default:
                    base.AddReference(referenceId, globalId);
                    break;
            }
        }

        public override void RemoveReference(ModelCode referenceId, long globalId)
        {
            switch (referenceId)
            {
                case ModelCode.REGULARTPOINT_REGULARISCHEDULE:

                    if (timePoints.Contains(globalId))
                    {
                        timePoints.Remove(globalId);
                    }
                    else
                    {
                        CommonTrace.WriteTrace(CommonTrace.TraceWarning, "Entity (GID = 0x{0:x16}) doesn't contain reference 0x{1:x16}.", this.GlobalId, globalId);
                    }

                    break;

                default:
                    base.RemoveReference(referenceId, globalId);
                    break;
            }
        }

    }
}
