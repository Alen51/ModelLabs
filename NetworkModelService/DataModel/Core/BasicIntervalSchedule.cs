//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;

    
    
    /// Schedule of values at points in time.
    public class BasicIntervalSchedule : IdentifiedObject {
        
        /// The time for the first time point.
        private DateTime startTime;
        
        
        private UnitMultiplier value1Multiplier;
        
       
        private UnitSymbol value1Unit;
        
        
        private UnitMultiplier  value2Multiplier;
        
        
        private UnitSymbol value2Unit;
        
        

        public BasicIntervalSchedule(long globalId) : base(globalId)
        {
        }

        public DateTime StartTime { get => startTime; set => startTime = value; }
        public UnitMultiplier Value1Multiplier { get => value1Multiplier; set => value1Multiplier = value; }
        public UnitSymbol Value1Unit { get => value1Unit; set => value1Unit = value; }
        public UnitMultiplier Value2Multiplier { get => value2Multiplier; set => value2Multiplier = value; }
        public UnitSymbol Value2Unit { get => value2Unit; set => value2Unit = value; }

        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                BasicIntervalSchedule x = (BasicIntervalSchedule)obj;
                return ((x.startTime == this.startTime) &&
                        (x.value1Multiplier == this.value1Multiplier) &&
                        (x.value1Unit == this.value1Unit) &&
                        (x.value2Multiplier == this.value2Multiplier) &&
                        (x.value2Unit == this.value2Unit));
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool HasProperty(ModelCode t)
        {
            switch (t)
            {
                case ModelCode.BASICISCEDULE_STARTTIME:
                case ModelCode.BASICISCEDULE_V1M:
                case ModelCode.BASICISCEDULE_V1U:
                case ModelCode.BASICISCEDULE_V2U:
                case ModelCode.BASICISCEDULE_V2M:
                    return true;

                default:
                    return base.HasProperty(t);
            }
        }

        public override void GetProperty(Property prop)
        {
            switch (prop.Id)
            {
                case ModelCode.BASICISCEDULE_STARTTIME:
                    prop.SetValue(startTime);
                    break;
                case ModelCode.BASICISCEDULE_V1M:
                    prop.SetValue((short)value1Multiplier);
                    break;
                case ModelCode.BASICISCEDULE_V1U:
                    prop.SetValue((short)value1Unit);
                    break;
                case ModelCode.BASICISCEDULE_V2M:
                    prop.SetValue((short)value2Multiplier);
                    break;
                case ModelCode.BASICISCEDULE_V2U:
                    prop.SetValue((short)value2Unit);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.BASICISCEDULE_STARTTIME:
                    startTime = property.AsDateTime();
                    break;
                case ModelCode.BASICISCEDULE_V1M:
                    value1Multiplier =(UnitMultiplier) property.AsEnum();
                    break;
                case ModelCode.BASICISCEDULE_V1U:
                    value1Unit =(UnitSymbol) property.AsEnum();
                    break;
                case ModelCode.BASICISCEDULE_V2M:
                    value2Multiplier = (UnitMultiplier)property.AsEnum();
                    break;
                case ModelCode.BASICISCEDULE_V2U:
                    value2Unit = (UnitSymbol)property.AsEnum();
                    break;

                default:
                    base.SetProperty(property);
                    break;
            }
        }
    }
}
