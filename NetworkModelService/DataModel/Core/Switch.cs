//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using System.Collections.Generic;
    using FTN;
    using FTN.Common;
    using FTN.Services.NetworkModelService.DataModel.Core;


    /// A generic device designed to close, or open, or both, one or more electric circuits.
    public class Switch : ConductingEquipment {
        
        /// A switch may be operated by many schedules.
        private long switchingOperations=0;
        
        

        public Switch(long globalId) : base(globalId)
        {
            
            
        }

        public long SwitchingOperations
        {
            get { return SwitchingOperations; }
            set { SwitchingOperations = value; }
        }


        public override bool Equals(object obj)
        {
            if (base.Equals(obj))
            {
                Switch x = (Switch)obj;
                return (x.switchingOperations == this.switchingOperations);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool HasProperty(ModelCode property)
        {
            switch (property)
            {
                case ModelCode.SWITCH_SWITCHINGOP:
                    return true;
                    break;

                default:
                    return base.HasProperty(property);
            }
        }

        public override void GetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.SWITCHINGOPERATION:
                    property.SetValue(switchingOperations);
                    break;

                

                default:
                    base.GetProperty(property);
                    break;
            }
        }

        public override void SetProperty(Property property)
        {
            switch (property.Id)
            {
                case ModelCode.SWITCHINGOPERATION:
                    switchingOperations = property.AsReference();
                    break;

                

                default:
                    base.SetProperty(property);
                    break;
            }
        }

        public override void GetReferences(Dictionary<ModelCode, List<long>> references, TypeOfReference refType)
        {
            if (switchingOperations != 0 && (refType == TypeOfReference.Reference || refType == TypeOfReference.Both))
            {
                references[ModelCode.SWITCHINGOPERATION_SWITCHES] = new List<long>();
                references[ModelCode.SWITCHINGOPERATION_SWITCHES].Add(switchingOperations);
            }

            base.GetReferences(references, refType);
        }
    }
}
