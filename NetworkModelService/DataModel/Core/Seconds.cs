//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// Time, in seconds.
    public class Seconds : IDClass {
        
        private UnitMultiplier? cim_multiplier;
        
        private const bool isMultiplierMandatory = true;
        
        private const string _multiplierPrefix = "cim";
        
        private UnitSymbol? cim_unit;
        
        private const bool isUnitMandatory = true;
        
        private const string _unitPrefix = "cim";
        
        /// Time, in seconds
        private System.Single? cim_value;
        
        private const bool isValueMandatory = true;
        
        private const string _valuePrefix = "cim";
        
        public virtual UnitMultiplier Multiplier {
            get {
                return this.cim_multiplier.GetValueOrDefault();
            }
            set {
                this.cim_multiplier = value;
            }
        }
        
        public virtual bool MultiplierHasValue {
            get {
                return this.cim_multiplier != null;
            }
        }
        
        public static bool IsMultiplierMandatory {
            get {
                return isMultiplierMandatory;
            }
        }
        
        public static string MultiplierPrefix {
            get {
                return _multiplierPrefix;
            }
        }
        
        public virtual UnitSymbol Unit {
            get {
                return this.cim_unit.GetValueOrDefault();
            }
            set {
                this.cim_unit = value;
            }
        }
        
        public virtual bool UnitHasValue {
            get {
                return this.cim_unit != null;
            }
        }
        
        public static bool IsUnitMandatory {
            get {
                return isUnitMandatory;
            }
        }
        
        public static string UnitPrefix {
            get {
                return _unitPrefix;
            }
        }
        
        public virtual float Value {
            get {
                return this.cim_value.GetValueOrDefault();
            }
            set {
                this.cim_value = value;
            }
        }
        
        public virtual bool ValueHasValue {
            get {
                return this.cim_value != null;
            }
        }
        
        public static bool IsValueMandatory {
            get {
                return isValueMandatory;
            }
        }
        
        public static string ValuePrefix {
            get {
                return _valuePrefix;
            }
        }
    }
}
